plugins {
    id 'java-library'
    id 'maven-publish'
    id "com.github.bjornvester.xjc" version "1.7.1"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

/*
 * Gets the version name from the latest Git tag, omit leading "v" - yeah!
 * Note: a plugin way to do this would be via https://plugins.gradle.org/plugin/net.nemerosa.versioning
 */
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    def tag = stdout.toString().trim()
    return tag.startsWith("v") ? tag.substring(1) : tag
}

/*
 * Gets the commit hash from the latest Git
 * Note: a plugin way to do this would be via https://plugins.gradle.org/plugin/net.nemerosa.versioning
 */
def getGitCommitHash = {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--format="%H"'
        standardOutput = stdout
    }
    return stdout.toString().trim().replace("\"", "")
}

version = version != null && version != "unspecified" ? version : getVersionName()

ext {
    // for Cargo-XML 8th Edition, the path is
    // "%LOCALAPPDATA%\IATA\Reader\1.0.0.0\Library\CXML 8th\Downloads\Schemas"
    // for Cargo-XML 4th Edition, the path is
    // "%APPDATA%\IATA\IATA Cargo-XML Message Manual and Toolkit 4th Edition\Downloads\Schemas"

    // default is set to Cargo-XML 8th Edition
    schemadir = project.findProperty("schemadir") ?: (System.getenv("LOCALAPPDATA") + "\\IATA\\Reader\\1.0.0.0\\Library\\CXML 8th\\Downloads\\Schemas")
    // packagePrefix = "org.iata.cargoxml.schema"
    packagePrefix = "com.riege.cargoxml.schema"

    specVendor           = 'International Air Transport Association (IATA)'
    product              = 'Cargo-XML'
    specTitle            = product + ' Specification'
    implVendor           = 'Riege Software'
    implTitle            = product + ' JAXB Java Library'
    implDescription      = implVendor + ' ' + product + ' JAXB Java Library'
    implVersion          = version
    javaTarget           = JavaVersion.VERSION_1_8
}

dependencies {
    /*
     * The following bindings are not required to BUILD or JAR this project
     * but the generated classes in the jar depend upon them.
     * (although included in Java 8)
     * In order to publish properly, the dependencies are declared.
     */
    // NOTE: DO NOT UPGRADE TO
    //       'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    //   nor 'com.sun.xml.bind:jaxb-impl:3.0.2'
    //   since it might break other projects
    api 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    api 'com.sun.xml.bind:jaxb-impl:2.3.3' // oder 2.3.8
}

jar {
    exclude("**/schema/CXML-*/**")
    exclude("**/schema/X*-*.00/**")
}

task unzipschema(type: Copy) {
    def thedirectory = new File(schemadir)

    // fileTree(dir: new File(thedirectory), includes: ['**/*.zip']).each { zipFile ->
    fileTree(dir: thedirectory, includes: ['X*-*.00/*.zip']).each { zipFile ->
        from zipTree(zipFile)
    }
    into thedirectory
}

xjc {
    xjcVersion.set("2.3.3")
    bindingFiles = project.files("$projectDir/src/main/bindings.xjb")
    groups {
        //
        //  The full CargoXML schema are not in this project
        //  Nevertheless if they are copies into subdirectories under
        //  src/main/resources/schema, then the following entries could
        //  be used to register them in order to generate JAXB classed
        //  from the schema.
        //  Example path:
        //    For XFWB3.00, the full schema should be copied so that
        //    there exists a file
        //    src/main/resources/schema/CXML-XFWB-3/Waybill_1.xsd
        //
        //    Additional the next 4 lines need to be activate to include the
        //    copies CXML-XWB-3 files:
        //
        //    register("xfwb3") {
        //        xsdFiles = xsdDir.asFileTree.matching { include("**/CXML-XWB-3/**/*.xsd") }
        //        defaultPackage.set("org.iata.cargoxml.xfwb3")
        //    }

        //  The official Cargo-XML Toolkit ZIP archives differ in their
        //  subdirectory structure and naming convensions.
        //  Take extra care to match the actual unzipped path/file when adding more.
        register("XFWB3") {
            xsdFiles = files(new File(schemadir + '/CXML-XFWB-3/Waybill Schema/Waybill_1.xsd').absolutePath)
            defaultPackage.set("${packagePrefix}.xfwb3")
        }
        register("XFSU3") {
            xsdFiles = files(new File(schemadir + '/XFSU-3.00/StatusMessage_1.xsd').absolutePath)
            defaultPackage.set("${packagePrefix}.xfsu3")
        }
        register("XFZB3") {
            xsdFiles = files(new File(schemadir + '/CXML-XFZB-3/CXML-XFZB-3/HouseWaybill_1.xsd').absolutePath)
            defaultPackage.set("${packagePrefix}.xfzb3")
        }
        register("XFNM3") {
            xsdFiles = files(new File(schemadir + '/CXML-XFNM-3/Response/Response_3.xsd').absolutePath)
            defaultPackage.set("${packagePrefix}.xfnm3")
        }
//        register("XSDG6") {
//            xsdFiles = files(new File(schemadir + '/CXML-XSDG-6.00/ShippersDeclarationForDangerousGoods_2p0.xsd').absolutePath)
//            defaultPackage.set("${packagePrefix}.xsdg6")
//        }
    }
}

group = 'com.riege'
sourceCompatibility = javaTarget
targetCompatibility = javaTarget

shadowJar {
    // When working with a Gradle project with the name myApp and version 1.0,
    // the default shadowJar task will output a file at:
    // build/libs/myApp-1.0-all.jar
    //
    // to remove the '-all', we set classifier to null:
    archiveClassifier = null
}

tasks.withType(Jar) {
    manifest {
        attributes(
                "Built-By"               : System.properties['user.name'],
                "Build-Timestamp"		 : new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                "Build-Jdk"      		 : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                "Build-OS"      		 : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                "Created-By"     		 : "Gradle ${gradle.gradleVersion}",
                "Specification-Title"    : specTitle,
                "Specification-Vendor"   : specVendor,
                "Implementation-Title"   : implTitle,
                "Implementation-Vendor"  : implVendor,
                "Implementation-Version" : implVersion
        )
    }
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        thisLibrary(MavenPublication) {
            publication -> project.shadow.component(publication)
            groupId group
            // from components.java
            pom {
                name = implTitle
                description = implDescription
                url = System.getenv("PROJECT_URL")
            }
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            name = "thisLibrary"
            url = System.getenv("MAVEN_PUBLISH_URL")
            credentials {
                username = System.getenv("MAVEN_PUBLISH_USERNAME")
                password = System.getenv("MAVEN_PUBLISH_PASSWORD")
            }
        }
    }
}
